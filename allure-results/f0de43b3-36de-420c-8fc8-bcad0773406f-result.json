{"name": "test_with_put_api", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_04_workspace.TestDashboard object at 0x00000280DBD0D8C0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c13b87cf78348f42477388f67417ba5a\")>\n\n    def test_with_put_api(self, driver):\n        print(\"clicked collections successfully\")\n        login_page = LoginPage(driver)\n        login_page.navigate()\n        login_page.enter_email(\"shivamtesting7@gmail.com\")\n        login_page.enter_password(\"Pass@9988\")\n        login_page.click_login_button()\n    \n        time.sleep(4)\n    \n        dashboard = WorkspacePage(driver)\n        dashboard.navigate()\n        workspace_url = dashboard.click_workspace_name()  # Extracts the URL dynamically\n        print(\"Navigated to extracted workspace URL:\", workspace_url)\n        time.sleep(10)\n    \n        driver.get(workspace_url)  # Navigate to the extracted workspace URL\n        time.sleep(10)\n    \n        dashboard.collection1()\n        print(\"Clicked 'Collection' button successfully\")\n        time.sleep(10)\n    \n        created_collection_put_url = dashboard.put_api()  # Extracts the URL dynamically\n        print(\"Navigated to extracted collections URL:\", created_collection_put_url)\n        time.sleep(10)\n    \n        driver.get(created_collection_put_url)  # Navigate to the extracted collection URL\n        time.sleep(10)\n    \n        dashboard.put_api()\n        print(\"Clicked 'get api' click successfully\")\n        time.sleep(10)\n    \n        get_collection_url = dashboard.run_debug()  # Extracts the URL dynamically\n        print(\"Navigated to extracted collections URL:\", get_collection_url)\n        time.sleep(10)\n    \n        driver.get(get_collection_url)  # Navigate to the extracted collection URL\n        time.sleep(10)\n    \n        dashboard.run_debug()\n        print(\"'run and debug' Click successfully\")\n        time.sleep(10)\n    \n>       dashboard.run()\n\ntests\\test_04_workspace.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\workspace_page.py:194: in run\n    run = WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c13b87cf78348f42477388f67417ba5a\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000280DBE85080>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\shivam srivastava\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "start": 1742289004243, "stop": 1742289116820, "uuid": "293d82f3-192c-47a2-9268-75d7ae2f7cd4", "historyId": "fff0257870b474b88d85a7bf5d7536e5", "testCaseId": "fff0257870b474b88d85a7bf5d7536e5", "fullName": "tests.test_04_workspace.TestDashboard#test_with_put_api", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_04_workspace"}, {"name": "subSuite", "value": "TestDashboard"}, {"name": "host", "value": "DESKTOP-LHJT9BM"}, {"name": "thread", "value": "19928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_04_workspace"}]}